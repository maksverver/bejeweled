-- current implementation doesn't work well with hard sets (BalusC large)
   add heuristics to make progress (e.g. counting number of moves)
   - this would mean associating a move list with every board created when
     expanding; should make everything a little slower.

   search priority would then include:
     -> number of moves available in the board
     -> total score
     -> number of moves made
        (would this ruin backtracking ability?)

   => but FIRST create some test sets to compare scores!

-- to increase performance and simplify parallellization,
   precalculate possible moves and loop over those (instead of looping
   over r,c,v separately)

- Checkme: priority queue and next queue sizes affect final scores;
           figure out why (performance reasons alone, or other reasons?)
           Specifically, a next-queue smaller than the main queue seems to
           improve scores.


- Test robustness of test case input functions.

To implement:
- Adhere to time limit (auto-quit after expiration)

- Write code to generate random test cases from templates
- Generate a bunch of meaningful test cases
- Keep test scores for different revisions to see if we're
  actually making progress.

- Try alternative state valuation: highest score/move ratio?
- Try forcing progress by kicking states with few moves
   (e.g. after 1 of 15 minutes, remove states with less than
         10,000/15 moves)
